def topKFrequent(self, words, k):
    """
    :type words: List[str]
    :type k: int
    :rtype: List[str]
    """
    count = collections.Counter(words)
    keys = count.keys()
    keys.sort(key = lambda w: (-count[w], w))
    return keys[:k]

def topKFrequent(self, words, k):
        """
        :type words: List[str]
        :type k: int
        :rtype: List[str]
        """
        count = collections.Counter(words)
        hip = [(-ct,key) for key,ct in count.items()]
        heapq.heapify(hip)
        return [heapq.heappop(hip)[1] for _ in xrange(k)]
